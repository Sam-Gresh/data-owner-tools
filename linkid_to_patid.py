#!/usr/bin/env python3

import argparse
import csv
from pathlib import Path
import os

HEADERS = ["LINK_ID", "PATID"]
HH_HEADERS = ["LINK_ID", "HH_ID"]


def parse_arguments():
    parser = argparse.ArgumentParser(
        description="Tool for translating LINK_IDs back into PATIDs"
    )
    parser.add_argument("sourcefile", help="Source PII CSV file")
    parser.add_argument("linksfile", help="LINK_ID CSV file from linkage agent")
    parser.add_argument(
        "--hhsource",
        help="Household *_hid_mapping.csv generated by testing-and-tuning/answer_key_map.py",
    )
    parser.add_argument(
        "--hhlinks",
        help="Household LINK_ID CSV file from linkage agent",
    )
    parser.add_argument(
        '-o', '--outputdir', dest='outputdir', default="output",
         help="Specify an output file for links. Default is 'output' directory"
    )
    args = parser.parse_args()
    return args


def parse_source_file(source_file):
    pii_lines = []
    with open(Path(source_file)) as source:
        source_reader = csv.reader(source)
        pii_lines = list(source_reader)
    return pii_lines


def write_patid_links(args):
    links_file = Path(args.linksfile)
    pii_lines = parse_source_file(args.sourcefile)
    with open(os.path.join(args.outputdir, "linkid_to_patid.csv"), "w", newline="", encoding="utf-8") as csvfile:
        writer = csv.writer(csvfile)
        writer.writerow(HEADERS)
        with open(links_file) as links:
            links_reader = csv.reader(links)
            # Skipping header
            next(links_reader)
            for row in links_reader:
                link_id = row[0]
                # The +1 accounts for the header row in spreadsheet index
                patid = pii_lines[int(row[1]) + 1][0]
                writer.writerow([link_id, patid])


def write_hh_links(args):
    hh_links_file = Path(args.hhlinks)
    hid_map = parse_source_file(args.hhsource)
    with open(os.path.join(args.outputdir, "linkid_to_hid.csv"), "w", newline="", encoding="utf-8") as csvfile:
        writer = csv.writer(csvfile)
        writer.writerow(HH_HEADERS)
        with open(hh_links_file) as links:
            links_reader = csv.reader(links)
            # Skipping header
            next(links_reader)
            for row in links_reader:
                link_id = row[0]
                # The +1 accounts for the header row in spreadsheet index
                hid = hid_map[int(row[1]) + 1][1]
                writer.writerow([link_id, hid])


def translate_linkids(args):
    write_patid_links(args)
    if args.hhlinks and args.hhsource:
        write_hh_links(args)


def main():
    args = parse_arguments()
    translate_linkids(args)


if __name__ == "__main__":
    main()
